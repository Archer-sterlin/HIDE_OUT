"""
Django settings for conf project.

Generated by 'django-admin startproject' using Django 4.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
import sys
from datetime import timedelta
from pathlib import Path

# from corsheaders.defaults import default_headers
from decouple import config

# from redis import Redis


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-i8^+j-#7$@8_&poplqt%x6akrfq4oj6d^8hx7#(r2@oay2t-u7"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", False)

ALLOWED_HOSTS = config("ALLOWED_HOST", "*").split(";")


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "apps.core",
    "apps.orders",
    "apps.store",
    "apps.users",
    "apps.blogs",
    "drf_yasg",
    "django_filters",
    "rest_framework",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "conf.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "conf.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTH_USER_MODEL = "users.User"
AUTHENTICATION_BACKENDS = ("apps.utils.authentication.CustomAuthBackend",)
# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# EMAIL SETTINGS
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
DEFAULT_FROM_EMAIL = "Hide out Loudge"
EMAIL_USE_TLS = True
EMAIL_HOST = config("EMAIL_HOST")
EMAIL_HOST_USER = config("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD")
EMAIL_PORT = 587

# GOOGLE KEYS
# BULK_SMS_TOKEN = config("BULK_SMS_TOKEN")
# BULK_SMS_URL = "https://www.bulksmsnigeria.com/api/v1/sms/create"
# SMS_FROM = config("SMS_FROM")
# SMS_USERNAME = config("SMS_USERNAME")
# SMS_PASSWORD = config("SMS_PASSWORD")
# SEND_CHAMP_TOKEN = config("SEND_CHAMP_TOKEN")
# SMS_SENDER_NAME = config("SMS_SENDER_NAME")

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=60),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": False,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUDIENCE": None,
    "ISSUER": None,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "JTI_CLAIM": "jti",
    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
}

UPLOAD_FILE_TYPES = ["application/pdf", "image/*"]
UPLOAD_FILE_EXTENSIONS = [".pdf", ".jpg", ".jpeg", ".gif", ".png", ".webp", "docx"]
REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": "rest_framework.schemas.coreapi.AutoSchema",
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PAGINATION_CLASS": "apps.utils.pagination.CustomPaginator",
    "PAGE_SIZE": 100,
}
DATETIME_FORMAT = "D, d M, Y H:i a"
DATE_FORMAT = "%d/%m/%Y"
STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static")
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# For CORS and CSRF
# CORS_ALLOW_HEADERS = list(default_headers) + ["X-Amz-Date"]
# CORS_ALLOW_CREDENTIALS = True
# CORS_ORIGIN_ALLOW_ALL = True
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:3000", "https://agroconet.vercel.app",
#     "http://localhost:8080", "http://192.168.8.101:8080"
#     ]
# CSRF_TRUSTED_ORIGINS = ["http://localhost:3000", "https://agroconet.vercel.app"]
# CSRF_COOKIE_HTTPONLY = True
# SESSION_COOKIE_HTTPONLY = True

# LOGGING CONFIGURATION
LOGS_DIR = os.path.join(BASE_DIR, "../logs")
if not os.path.isdir(LOGS_DIR):
    os.mkdir(LOGS_DIR)
LOG_FORMAT = "[%(levelname)s][%(asctime)s]%(message)s - %(pathname)s#lines-%(lineno)s[%(funcName)s]"
LOG_DATE_FORMAT = "%d/%b/%Y %H:%M:%S"
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "standard": {
            "format": "[%(asctime)s] [%(levelname)s %(levelno)s] [%(filename)s:%(lineno)s] %(message)s",
            "datefmt": "%d/%b/%Y %H:%M:%S",
        },
    },
    "handlers": {
        "console": {"level": "DEBUG", "class": "logging.StreamHandler", "stream": sys.stdout},
        "user_handler": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(LOGS_DIR, "user.log"),
            "formatter": "standard",
            "maxBytes": 104857600,
        },
        "store_handler": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(LOGS_DIR, "store.log"),
            "formatter": "standard",
            "maxBytes": 104857600,
        },
        "order_handler": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(LOGS_DIR, "order.log"),
            "formatter": "standard",
            "maxBytes": 104857600,
        },
        "blog_handler": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(LOGS_DIR, "blog.log"),
            "formatter": "standard",
            "maxBytes": 104857600,
        },
        "wallet_handler": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(LOGS_DIR, "wallet.log"),
            "formatter": "standard",
            "maxBytes": 104857600,
        },
    },
    "loggers": {
        "consumer": {
            "handlers": ["console"],
            "level": "DEBUG",
        },
        "user": {
            "handlers": ["user_handler"],
            "level": "INFO",
            "propagate": True,
        },
        "blog": {
            "handlers": ["blog_handler"],
            "level": "INFO",
            "propagate": True,
        },
        "order": {
            "handlers": ["order_handler"],
            "level": "INFO",
            "propagate": True,
        },
        "store": {
            "handlers": ["store_handler"],
            "level": "INFO",
            "propagate": True,
        },
        "wallet": {
            "handlers": ["wallet_handler"],
            "level": "INFO",
            "propagate": True,
        },
    },
}
LOGIN_URL = "rest_framework:login"
LOGOUT_URL = "rest_framework:logout"
SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {"basic": {"type": "basic"}},
    "USE_SESSION_AUTH": True,
    "TAGS_SORTER": "alpha",
}

# BASE_BE_URL = config("BASE_BE_URL")

# REDIS CONFIGURATION
# REDIS_URL = config("REDIS_URL", "redis://:farmfeat@localhost:6379/0")
# REDIS = Redis.from_url(REDIS_URL)

# CACHES = {
#     "default": {
#         "BACKEND": "django_redis.cache.RedisCache",
#         # "LOCATION": REDIS_URL,
#         "KEY_PREFIX": "farmfeat",
#         "OPTIONS": {
#             "CLIENT_CLASS": "django_redis.client.DefaultClient",
#         },
#     }
# }
CACHE_TTL = 60 * 1

# CELERY CONFIGURATION
CELERY_BROKER_URL = "redis://:hideout@localhost:6379/0"
CELERY_RESULT_BACKEND = "redis://:hideout@localhost:6379/1"
CELERY_ACCEPT_CONTENT = ["application/json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = TIME_ZONE
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"
