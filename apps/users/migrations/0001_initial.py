# Generated by Django 4.1.3 on 2022-11-02 23:18

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(blank=True, null=True, verbose_name="last login"),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(blank=True, max_length=150, verbose_name="first name"),
                ),
                (
                    "last_name",
                    models.CharField(blank=True, max_length=150, verbose_name="last name"),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "type",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "CUSTOMER"),
                            (1, "STAFF"),
                            (2, "DEALER"),
                            (3, "AGENT"),
                            (4, "INVESTOR"),
                        ],
                        default=0,
                    ),
                ),
                ("mobile", models.CharField(max_length=20, unique=True)),
                ("email", models.EmailField(blank=True, max_length=255, null=True)),
                ("state", models.CharField(blank=True, max_length=255, null=True)),
                ("city", models.CharField(blank=True, max_length=255, null=True)),
                ("zip_code", models.CharField(blank=True, max_length=255, null=True)),
                ("town", models.CharField(blank=True, max_length=255, null=True)),
                ("address", models.TextField(blank=True, default="", null=True)),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[("male", "Male"), ("female", "Female")],
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "marital_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("MARRIED", "MARRIED"),
                            ("SINGLE", "SINGLE"),
                            ("DIVORSED", "DIVORSED"),
                        ],
                        max_length=255,
                        null=True,
                    ),
                ),
                ("newsletter", models.BooleanField(default=True)),
                ("is_confirmed", models.BooleanField(blank=True, default=False)),
                (
                    "first_login",
                    models.BooleanField(blank=True, default=True, null=True),
                ),
                ("secret_key", models.CharField(blank=True, max_length=255, null=True)),
                ("public_key", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "referral_code",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "db_table": "user",
                "ordering": ("-date_joined",),
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Wallet",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("identifier", models.CharField(max_length=255, unique=True)),
                ("amount", models.FloatField(default=0.0)),
                ("ledge_balance", models.FloatField(default=0.0)),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now_add=True, null=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="virtual_bank",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Wallet",
                "db_table": "wallet",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="StaffSettings",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("waiter", "WAITER"),
                            ("bar tender", "BAR_TENDER"),
                            ("manager", "MANAGER"),
                        ],
                        max_length=200,
                        null=True,
                    ),
                ),
                ("staff_name", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("waiter", "WAITER"),
                            ("bar tender", "BAR_TENDER"),
                            ("manager", "MANAGER"),
                        ],
                        max_length=255,
                        null=True,
                    ),
                ),
                ("state", models.CharField(blank=True, max_length=255, null=True)),
                ("local_govt", models.CharField(blank=True, max_length=255, null=True)),
                ("address", models.TextField(default="")),
                ("disability", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "image",
                    models.ImageField(blank=True, null=True, upload_to="farmer_images"),
                ),
                ("bank_code", models.CharField(blank=True, max_length=255, null=True)),
                ("bank_name", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "account_number",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "account_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="farmer",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "StaffSetting",
                "verbose_name_plural": "StaffSettings",
                "db_table": "staff_settings",
                "ordering": ("-created_at",),
            },
        ),
        migrations.CreateModel(
            name="DeliveryAddress",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("location_name", models.CharField(max_length=255)),
                ("address", models.TextField(blank=True, default="")),
                ("zip_code", models.CharField(blank=True, max_length=255, null=True)),
                ("city", models.CharField(blank=True, max_length=255, null=True)),
                ("state", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "phone_number",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("is_default_address", models.BooleanField(default=False)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="delivery_address",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "User Delivery Address",
            },
        ),
        migrations.CreateModel(
            name="AuthToken",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "type",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "TRANSFER"),
                            (1, "LOGIN TOKEN"),
                            (2, "NUMBER VERIFICATION"),
                            (3, "AUTHORIZATION TOKEN"),
                        ],
                        default=2,
                    ),
                ),
                (
                    "token",
                    models.CharField(blank=True, editable=False, max_length=255, null=True),
                ),
                (
                    "status",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[(0, "PENDING"), (1, "USED")],
                        default=0,
                        editable=False,
                        null=True,
                    ),
                ),
                ("expiry", models.DateTimeField(blank=True, editable=False, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_token_value",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Token",
                "db_table": "auth_token",
                "ordering": ("-created_at",),
            },
        ),
    ]
